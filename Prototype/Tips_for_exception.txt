    @search = BASE_CMD_TBL.ransack(params[:q])
    @base_cmds = @search.result
    @search.build_condition

    ("INNER JOIN CMD_PART_TBL ON (CMD_PART_TBL.CMD_ID = BASE_CMD_TBL.CMD_ID) INNER JOIN BIT_SEL_TBL_INFO ON (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NO = CMD_PART_TBL.RESOLUTION)")

    BASE_CMD_TBL.joins(:cmd_part_tbls).joins("INNER JOIN BIT_SEL_TBL_INFO ON (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NO = CMD_PART_TBL.RESOLUTION) AND (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NAME LIKE '%bit%')")


BASE_CMD_TBL.joins(:cmd_part_tbls).joins("INNER JOIN BIT_SEL_TBL_INFO ON (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NO = CMD_PART_TBL.RESOLUTION) AND (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NAME LIKE'%#{name}%')")
SELECT  `BASE_CMD_TBL`.* FROM `BASE_CMD_TBL` INNER JOIN `CMD_PART_TBL` ON `CMD_PART_TBL`.`CMD_ID` = `BASE_CMD_TBL`.`CMD_ID` INNER JOIN BIT_SEL_TBL_INFO ON (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NO = CMD_PART_TBL.RESOLUTION) AND (BIT_SEL_TBL_INFO.BIT_SEL_TBL_NAME LIKE'%bit%')



	begin
    self.foo << bar
  rescue Exception => e      # only for debug purposes, don't rescue Exception in real code
    logger.debug "#{e.class}"
  end
def db_check
  begin 
    schema_call = ActiveRecord::Base.establish_connection(
      :adapter => 'mysql2',
      :host => 'localhost',
      :database => 'dev_db',
      :username => 'dev_user',
      :password => 'dev_pw').connection.execute("SELECT * FROM schema_migrations LIMIT 1")

    if schema_call
      render :status => 200, :file => "public/success.html"
    else
      render :status => 500, :file => "public/query_fail.html"
    end
  rescue Exception => e
    puts "#{e.class} ;; #{e.message}"
    logger.debug "#{e.class}"
    render :status => 500, :file => "public/500.html"
  end
end

#error_explanation {
  color: red;
  ul {
    color: red;
    margin-top: 30px;
  }
}

.field_with_errors {
  @extend .has-error;
  .form-control {
    color: $state-danger-text;
  }
}

.flash {
  margin-top: 70px;
  .alert{
    margin-bottom: 0px;
  }
}

  def database_change(user,defaults, server, db_name, db_username, db_password)
    begin
      config = ActiveRecord::Base.configurations["#{defaults}"]
      config["host"] = server
      config["database"] = db_name
      config["username"] = db_username
      config["password"] = db_password
      ExternalDbAccess.establish_connection config
      schema_call = ExternalDbAccess.connection.execute("SELECT * FROM SUBSYSTEM_TBL LIMIT 1")
      if schema_call
        redirect_to user
      end
    rescue Mysql2::Error => e
      log_out
        render :status => 500, :file => "public/mysql_fail.html"
        return
    end
  end

  <%= render 'shared/error_messages', object: f.object %>

  hexa =  ^[0-9A-F]+$
  number = ^[0-9]+$
  float = ^[+-]?([0-9]*[.])?[0-9]+$
  or ^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$


  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
    validates :email, presence: true, length: { maximum: 255 },
                      format: { with: VALID_EMAIL_REGEX }


    $('#test').attr('disabled', true);


    #for composite key uniqueness

    validates_uniqueness_of :teacher_id, scope: [:semester_id, :class_id]
    uniqueness: { scope: [:id] 


    #message validator usage
    validates :title, 
          :presence => {:message => "Title can't be blank." },
          :uniqueness => {:message => "Title already exists."},
          :length => { :maximum => 100, :message => "Must be less than 100 characters"}