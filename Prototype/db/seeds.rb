# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

# MAP_ID_TBL.create([{ MAP_ID: "MAPID_05" },{ MAP_ID: "MAPID_06" },{ MAP_ID: "MAPID_07" },{ MAP_ID: "MAPID_08" }])

# PART_TYPE_TBL.create([{ PART_TYPE: "AOCE_MODE" },{ PART_TYPE: "ADDR_DATA" },{ PART_TYPE: "BASE_CMD_CODE" },{ PART_TYPE: "BITWISE_DATA" },{ PART_TYPE: "CHECK_SUM_DATA" },{ PART_TYPE: "CID_DATA" },
#   { PART_TYPE: "CMD_DATA_LEN" },{ PART_TYPE: "CMD_NUMBER" },{ PART_TYPE: "CMD_SUB_DATA_LEN" },{ PART_TYPE: "CONTEXT_LKP_DATA" },{ PART_TYPE: "DECODER_CODE" },{ PART_TYPE: "DELAY_DATA" },{ PART_TYPE: "EVENT_MASK_DATA" },
#   { PART_TYPE: "EVENT_NUM_DATA" },{ PART_TYPE: "FIXED_CODE" },{ PART_TYPE: "FORMULA_DATA" },{ PART_TYPE: "HTR_BANK_NUM_DATA" },{ PART_TYPE: "HTR_BANK_STATUS_DATA" },{ PART_TYPE: "HTR_LLIM_DATA" },
#   { PART_TYPE: "HTR_NUM_DATA" },{ PART_TYPE: "HTR_ULIM_DATA" },{ PART_TYPE: "IGNORE_DATA" },{ PART_TYPE: "LKP_TBL" },{ PART_TYPE: "NSEL_DECODER_CODE_DATA" },
#   { PART_TYPE: "OBT_DELAY_DATA" },{ PART_TYPE: "PART_PROC_LOGIC" },{ PART_TYPE: "PID_IN_MASTER_FRAME_MASK" },{ PART_TYPE: "PROG_PARAM_DATA" },{ PART_TYPE: "RAW_DATA" },{ PART_TYPE: "REL_OPERATOR_DATA" },
#   { PART_TYPE: "REMOTE_DATA" },{ PART_TYPE: "REMOTE_DATA_COUNT" },{ PART_TYPE: "RT_ADDR" },{ PART_TYPE: "START_ENTRY_NO_DATA" },{ PART_TYPE: "STATIC_CID_DATA" },{ PART_TYPE: "STR_LKP_TBL" },
#   { PART_TYPE: "SUB_FORMATION_LOGIC" },{ PART_TYPE: "SUB_ADDR" },{ PART_TYPE: "TM_FRAME_ID_DATA" },
#   { PART_TYPE: "TM_WORD_NUM_DATA" },{ PART_TYPE: "TOTAL_NO_ENTRY_DATA" },{ PART_TYPE: "USER_DATA" }])

# INPUT_FORMAT_TBL.create([{ INPUT_FORMAT: "BINARY" },{ INPUT_FORMAT: "CHAR_ARRAY_8" },{ INPUT_FORMAT: "IEEE1750_FLOAT" },{ INPUT_FORMAT: "IEEE1750_INT" },{ INPUT_FORMAT: "IEEE1750_LONG_FLOAT" },{ INPUT_FORMAT: "IEEE1750_LONG_INT" },{ INPUT_FORMAT: "IGNORE_FMT" },
#   { INPUT_FORMAT: "INT_HEXADECIMAL" },{ INPUT_FORMAT: "INT_SIGNED_DECIMAL" },{ INPUT_FORMAT: "REAL_UNSIGNED_DECIMAL" },{ INPUT_FORMAT: "INT_UNSIGNED_DECIMAL" },{ INPUT_FORMAT: "REAL_SIGNED_DECIMAL" }])

# PREFERRABLE_DECODER_TBL.create([{ PREFERRABLE_DECODER: "DCODR_ANY"},{ PREFERRABLE_DECODER: "DCODR1_ONLY"},{ PREFERRABLE_DECODER: "DCODR2_ONNY"}])

# CRITICALITY_TBL.create([{ CRITICALITY: "NO_CRIT" },{ CRITICALITY: "HW_CRIT" },{ CRITICALITY: "SW_CRIT" },{ CRITICALITY: "USED_UP" }])

# PULSE_WIDTH_TBL.create([{ PULSE_WIDTH: "PW_64" },{ PULSE_WIDTH: "PW_128" },{ PULSE_WIDTH: "PW_256" },{ PULSE_WIDTH: "PW_512" }])

# BASE_FORMATION_LOGIC_TBL.create([{ BASE_FORMATION_LOGIC: "HW_CMD"},{ BASE_FORMATION_LOGIC: "AOCE_1553"},{ BASE_FORMATION_LOGIC: "AOCE_RT_1553"},{ BASE_FORMATION_LOGIC: "TCP_DIRECT"},{ BASE_FORMATION_LOGIC: "TCP_BULK_UPLINK"},{ BASE_FORMATION_LOGIC: "TCP_DUMP"},
#   { BASE_FORMATION_LOGIC: "TCP_EDIT"},{ BASE_FORMATION_LOGIC: "TCP_DATA_CMD"},{ BASE_FORMATION_LOGIC: "RT_THRU_TCP_BULK_DATA"},{ BASE_FORMATION_LOGIC: "OBT_BULK_DATA"},{ BASE_FORMATION_LOGIC: "TT_BULK_DATA"},{ BASE_FORMATION_LOGIC: "CCB_BULK_DATA"}])

# LKUP_TBL_TYPE_TBL.create([{ LKUP_TBL_TYPE: "STRING_TYPE" },{ LKUP_TBL_TYPE: "REF_PID_TYPE" },{ LKUP_TBL_TYPE: "INTEGER_TYPE" },{ LKUP_TBL_TYPE: "TMC_TYPE" },{ LKUP_TBL_TYPE: "FLOAT_TYPE" }])

# LOGICAL_OP_TBL.create([{ LOGICAL_OP: "AND"},{ LOGICAL_OP: "OR"},{ LOGICAL_OP: "XOR"}])

# CONFIRMATION_TYPE_TBL.create([{ BIT_POSITION: 0,CONFIRMATION_TYPE: "CONF_NONE",BIT_VAL: 0 },
#   { BIT_POSITION: 1,CONFIRMATION_TYPE: "AUX_REG",BIT_VAL: 1 },
#   { BIT_POSITION: 2,CONFIRMATION_TYPE: "UPLINK_COUNTER",BIT_VAL: 2 },
#   { BIT_POSITION: 3,CONFIRMATION_TYPE: "SEG_TRANSFER_COUNTER",BIT_VAL: 4 },
#   { BIT_POSITION: 4,CONFIRMATION_TYPE: "RT_BULK_COUNTER",BIT_VAL: 8 },
#   { BIT_POSITION: 5,CONFIRMATION_TYPE: "BC_BULK_COUNTER",BIT_VAL: 16 },
#   { BIT_POSITION: 6,CONFIRMATION_TYPE: "RT_THRU_TCP_BULK_COUNTER",BIT_VAL: 32},
#   { BIT_POSITION: 7,CONFIRMATION_TYPE: "TM_PID",BIT_VAL: 64 },
#   { BIT_POSITION: 8,CONFIRMATION_TYPE: "CONF_CHECKSUM",BIT_VAL:  128},
#   { BIT_POSITION: -1,CONFIRMATION_TYPE: "CONF_ALL",BIT_VAL:  255}])

# SUBSYSTEM_TBL.create([{ SUBSYSTEM_ID: 1, SUBSYSTEM_NAME: "AOCE"},{ SUBSYSTEM_ID: 2, SUBSYSTEM_NAME: "AOCS"},{ SUBSYSTEM_ID: 3, SUBSYSTEM_NAME: "DTG"},{ SUBSYSTEM_ID: 4, SUBSYSTEM_NAME: "EED"}])

# UI_TYPES_TBL.create([{ UI_TYPE_ID: 1, UI_TYPE: "GEN_ON_OFF_CMD_UI"},{ UI_TYPE_ID: 2, UI_TYPE: "USER_DATA_CMD_UI"},{ UI_TYPE_ID: 3, UI_TYPE: "BIT_SEL_CMD_UI"}])

# CMD_TYPES_TBL.create([{ CMD_TYPE_ID: 1, CMD_TYPE: "ON_OFF_CMD"},{ CMD_TYPE_ID: 2, CMD_TYPE: "USER_DATA_CMD"},{ CMD_TYPE_ID: 3, CMD_TYPE: "BIT_SEL_CMD"},{ CMD_TYPE_ID: 4, CMD_TYPE: "LKUP_CMD"}])

 100.times do |n|
 	cmd = rand(1..4000)
 	BASE_CMD_TBL.create!(CMD_ID: cmd,
 	DESCRIPTION: "water",
    SUBSYSTEM: "AOCE",
    FORMATION_TYPE: "water",
    CMD_TYPE: "BIT_SEL_CMD",
    BASE_CMD_CODE: "12",
    BASE_CMD_MASK: "12",
    CRITICALITY: "water",
    PULSE_WIDTH: "water",
    MAP_ID: "water",
    UI_TYPE:  "USER_DATA_CMD_UI",
    PREFERRABLE_DECODER: "water",
    CONFIRMATION_TYPE: 23,
    REMARKS: "water")
 end